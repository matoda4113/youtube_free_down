import 'dart:async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';

import 'main.dart';

///DownTestScreen
///담당자 : ---

class DownTestScreen extends StatefulWidget {
  const DownTestScreen({Key? key}) : super(key: key);

  @override
  State<DownTestScreen> createState() => _DownTestScreenState();
}

class _DownTestScreenState extends State<DownTestScreen> {

  @override
  void initState() {
    super.initState();

  }

  YoutubeExplode yt = YoutubeExplode();
  String extractVideoId(String input) {
    RegExp regExp = RegExp(
      r'(?:(?:youtu\.be/|youtube\.com/watch\?v=)([^?&]+)|([a-zA-Z0-9_-]{11}))',
    );

    RegExpMatch? match = regExp.firstMatch(input);

    if (match != null) {
      // group(1)이 null이 아니면 그 값을, 그렇지 않으면 group(2)의 값을 반환합니다.
      String videoId = match?.group(1) ?? match.group(2)! ;

      return videoId;
    } else {
      // 일치하는 패턴이 없을 경우 기본값 또는 에러 처리
      return input; // 또는 throw Exception('Invalid input');
    }
  }




  void getYoutubeList() async{

    String urlValue="https://www.youtube.com/shorts/YEsorobZ9cc";
    setState(() {
      isLoading = true;
    });
    Video v = await yt.videos.get(extractVideoId(urlValue));
    setState(() {
      video = v;
    });

    ClosedCaptionManifest? trackManifest = await yt.videos.closedCaptions.getManifest(extractVideoId(urlValue));
    logger.e(trackManifest.tracks);
    if(trackManifest !=null && trackManifest != []){
      List<ClosedCaptionTrackInfo>? tracks = trackManifest.tracks.where((element) => element.format.formatCode=='srv1').toList();
      ClosedCaptionTrackInfo trackInfo = tracks!.where((element) => element.isAutoGenerated == true).first;
      ClosedCaptionTrack d = await yt.videos.closedCaptions.get(trackInfo);

      logger.e(trackInfo.format.toJson());

      String cap = "";
      d.captions.forEach((c){
        cap = cap+"\n"+c.text;
      });
      logger.w(cap);
    }




    StreamManifest streamManifest = await yt.videos.streamsClient.getManifest(extractVideoId(urlValue));
    List<MuxedStreamInfo> list1 = streamManifest.muxed.toList();
    List<VideoOnlyStreamInfo> list2 = streamManifest.videoOnly.toList();
    List<AudioOnlyStreamInfo> list3 = streamManifest.audioOnly.toList();




    setState(() {
      muxedList = list1;
      videoOnlyList = list2;
      audioOnlyList = list3;
      isLoading = false;
    });
  }

  List<MuxedStreamInfo> muxedList = [];
  List<VideoOnlyStreamInfo> videoOnlyList = [];
  List<AudioOnlyStreamInfo> audioOnlyList = [];

  Video? video;

  bool isLoading = false;


  Future<void> downloadYoutube(StreamInfo streamInfo) async {
    setState(() {
      isLoading = true;
    });

    String title = video!.title + "_" + streamInfo.qualityLabel;
    title = title.replaceAll(RegExp(r'\s+'), '');
    final directory = await getApplicationDocumentsDirectory();

    logger.e(directory.path);
    String videoFilePath ="";

    //////비디오
    if (streamInfo != null) {

      videoFilePath = '/Users/iseonghun/Library/Containers/com.saran.youFreeDown/Data/Documents/video/${title}.${streamInfo.container.name}';

      var stream = yt.videos.streamsClient.get(streamInfo);
      var file = File(videoFilePath);
      var fileStream = file.openWrite();
      var totalBytes = streamInfo.size.totalBytes;
      var receivedBytes = 0;
      var completer = Completer<void>();
      var subscription = stream.listen(
            (data) {
          fileStream.add(data);
          receivedBytes += data.length;
          setState(() {
            progress = receivedBytes / totalBytes;
          });
        },
        onDone: () async {
          await fileStream.flush();
          await fileStream.close();
          logger.e("완료");
          setState(() {
            isLoading = false;
          });
          completer.complete();
        },
        onError: (e) {
          print('Error: $e');
          setState(() {
            isLoading = false;
          });
          completer.completeError(e);
        },
        cancelOnError: true,
      );

      await completer.future;
      await subscription.cancel();
    }

  }
  double progress = 0;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Text(progress.toString()),
        ElevatedButton(onPressed: (){
          getYoutubeList();
        }, child: Text("영상 불러오기")),
        if(video!=null)
          Column(
            children: [
              Row(
                children: [
                  Text("제목 : "),
                  Expanded(child: Text(video?.title??"")),
                ],
              ),
              Image.network(video?.thumbnails.highResUrl??"",width: 100,),
              Text(video?.duration.toString()??""),
            ],
          ),
        Expanded(child: SingleChildScrollView(
          child: Column(
            children: [
              Text("비디오 리스트"),
              ListView.builder(
                shrinkWrap: true,
                itemCount: videoOnlyList.length,
                physics: NeverScrollableScrollPhysics(),
                itemBuilder: (context, index) {
                  return GestureDetector(
                    onTap: () async{
                      downloadYoutube(videoOnlyList[index]);
                    },
                    child: Container(
                        height: 50,
                        margin: EdgeInsets.symmetric(vertical: 10),
                        color: Colors.greenAccent,
                        child: Row(
                          children: [
                            Text(videoOnlyList[index].qualityLabel),
                            Text("//"),
                            Text(videoOnlyList[index].container.name),
                            Text("//"),
                            Text(videoOnlyList[index].size.totalMegaBytes.toStringAsFixed(2)+"MB"),
                          ],
                        )),
                  );
                },
              ),

            ],
          ),
        )),


      ],
    );
  }
}

